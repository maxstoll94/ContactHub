@using ContactHub.Application.Queries.GetCompanies;
@using ContactHub.Web.Components.Company
@using ContactHub.Web.Components.Contact

<div class="bg-white rounded shadow-sm d-flex flex-column" style="height: 120px;">
    <Button class="d-flex flex-grow-1 justify-content-center align-items-center" Clicked="@ShowModal">
            <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"></path>
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"></path>
            </svg>
        </Button>
</div>

<Modal @bind-Visible="@modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Contact create</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (Layout != null)
            {
                @switch (Layout.CardType)
                {
                    case MainLayout.CardTypeEnum.Contacts:
                        <CreateContactForm SubmitCallback="SubmitContactsCallback" CompanySelectList="CompanySelectList" />
                        break;
                    case MainLayout.CardTypeEnum.Companies:
                        <CreateCompanyForm SubmitCallback="SubmitCompaniesCallback" />
                        break;
                    default:
                        <p>Card type is not supported</p>
                        break;
                }
            }      
        </ModalBody>
    </ModalContent>
</Modal>

@code {

    [Parameter]
    public EventCallback FetchContactsCallback { get; set; }

    [Parameter]
    public EventCallback FetchCompaniesCallback { get; set; }

    [Parameter]
    public IEnumerable<CompanyResponse>? CompanySelectList { get; set; }

    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    private bool modalVisible;

    private async Task SubmitCompaniesCallback()
    {
        await FetchCompaniesCallback.InvokeAsync();
        await HideModal();
    }

    private async Task SubmitContactsCallback()
    {
        await FetchContactsCallback.InvokeAsync();
        await HideModal();
    }

    private Task ShowModal()
    {
        modalVisible = true;
        return Task.CompletedTask;
    }

    private Task HideModal()
    {
        modalVisible = false;
        return Task.CompletedTask;
    }
}
